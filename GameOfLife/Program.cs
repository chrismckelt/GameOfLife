using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace GameOfLife
{
   /// <summary>
    /// http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
   /// </summary>
    class Program
   {
       private const int ROUNDS = 3;
       private const string LOG_DIRECTORY = @"c:\Dev\GameOfLife\Log\";
      
       #region sample data 

       private const string SAMPLE_INPUT = @"
10100
00100
10100
";

       private const string SAMPLE_INPUT2 = @"
10011000111001011011110100010000101101111001011111001100111110011101000100111100
00011100110100111001101100011101000101110110011001101100010011100001001010110101
11011101011000100110010011111111011001000010001000011001101100000101111100110110
01000000110011010001001111100011101101001101101000111100011000000010110110011110
00111101001110110110100111011100110101001101010101011001101011110010010110110110
11001010010110100011111000001001111011011101100111110101011000010001010101001111
00101010110111110001000000110100100100111001110001001011010111111010110010100010
10011101110010110100111000100011011111111011010100110010010100001100001011101100
10110010111100011011100001110000100001011100101100110010100100101010010000100110
10011000111001011011110100010000101101111001011111001100111110011101000100111100
00011100110100111001101100011101000101110110011001101100010011100001001010110101
11011101011000100110010011111111011001000010001000011001101100000101111100110110
01000000110011010001001111100011101101001101101000111100011000000010110110011110
00111101001110110110100111011100110101001101010101011001101011110010010110110110
11001010010110100011111000001001111011011101100111110101011000010001010101001111
00101010110111110001000000110100100100111001110001001011010111111010110010100010
10011101110010110100111000100011011111111011010100110010010100001100001011101100
10110010111100011011100001110000100001011100101100110010100100101010010000100110
10001101010100111110100011011101100001100001101011010110111010110101001011100110
11010110100001100001001001111011100110101110000011101110101101101111000110010111
11110001011111000011001110111000010001000000010111110000110001101100110100001001
10110010011001010011001110101100100011100110000001011111010010000011011001100111
10001010111111011111101000101011001100101101010100110001001110011011001100100010
10110000111101100000011100110010011011011110110011111100100011110110001111100000
11111101011100010111011110101010110010010100000101001001101011101110000110001101
10101100100101110101000010011101100111100001101011000101110011110110001010001110
10000100111000011001101100000010101010100000000111000111111010011111101011101000
00011010010110011100101001000110000101100101100101001111110011001000111011100110
01010110001011110111101110111110100011100100100000000000101011111100010010001111
10111111000001000010101001011100111100111100000010000111101101100010110011011101
10011111000101110000111111100110010111000101111110110101100110010001110111011100
00100010010111110101011001111101101010010110000010000011011011000100001101001110
11110100111010011011010001010011100111010110110111110101010110000000101111110011
00000100011011110110011010101110110101100000100001000100000001011011001011001111
00000000010001101011100100100011010110101110011011110011001110100111010111101111
01000110001001011000101110010111101010100000000100001010011010010011000101001110
10010110001100010111101110111001111110010001101001000010111010111000110111011101
11000011001100000100100101101000101110111101110000001110110110001110110110001111
00001011000000010010101100101001001000010010111101011101001110001001111000100101
11100100011101000100010011111101001101100111111001010100110010110010111011011011
00100110111111010011000100001000100111011000110000111011000110100010111111000110
11101011110110001100111101010110011100111010000011101101001001101011011000010100
11000000110011111100111100111011010010011010011110110110000111100001000100101011
11101100010000111000010000010001110101101111000110110001010010010010001111010101
10010110100010100101101001000011001000001011100000001001111110001111110101100110
01000110111011101101010011110001000110011101001101010111110110100110110110101001
10111100100000010110001001100000111011100110101000001000001100000010110110111111
01100100110011001110101000010010101010100011111111010011101010000111010000011010
11100100011001111100011101010001111010100010000101101001111010011101010111110110
11010010010100110100011110000010011011110100000011100011110010110011110101000100
10001011100001111010111010110100010101011111110111001000000101001011011001011010
10010010000100100111010110111000101001100000110100100100111011111011001101010100
11101011001101111010010010011001011101010111110110000110000100110110111100101010
11110010100101001111011010000101101100100010011010001101110111010100110100110011
11011001101001010101101001110001100000000000010010101100100000111110100110000101
01101000011011111100000111110100110110111010011100100111000110100000100011110000
01100000000000001000000100100101010111010001001110101011111011001000101000100010
00110001010110010011111001101110011100000000101001101001001111000001011010000100
11011010100110110001111001001011101001011000111001010111100100110100110010011011
01111100010001100011101111000000111001110110001011000110000100101111001110110001
00001111100010000111011001100011111010001101010110111100010011111101011001111000
00011010010111001000000010000101000001001011110000110110000010010011110101100001
01011110010110001101011001000111010000010000100010110110011101011111001111000111
00111010111100011101001000100011100100110000000001010100000100100010100011110110
10110101101111011100010001110011001100001011101010011110011001101111100001101101
01101111011111010111110010001100010011011110011101101110010111100101111100000010
01111001110000011011001100010100101101101100100100000010101110010001101011011111
10101010110001000010100110110000011011000101001101000110011010000000000000000010
00001111101100101001000011000100101101010111000100001101101001010101000111101110
10101001011110010110001010010111010011011000000011100111110010011010001101101011
00111011100101100110011110000001100110110001110011010101011010011100100000000000
11101100010000111000010000010001110101101111000110110001010010010010001111010101
10010110100010100101101001000011001000001011100000001001111110001111110101100110
01000110111011101101010011110001000110011101001101010111110110100110110110101001
10111100100000010110001001100000111011100110101000001000001100000010110110111111
01100100110011001110101000010010101010100011111111010011101010000111010000011010
11100100011001111100011101010001111010100010000101101001111010011101010111110110
11010010010100110100011110000010011011110100000011100011110010110011110101000100
10001011100001111010111010110100010101011111110111001000000101001011011001011010
10011000111001011011110100010000101101111001011111001100111110011101000100111100
00011100110100111001101100011101000101110110011001101100010011100001001010110101
11011101011000100110010011111111011001000010001000011001101100000101111100110110
01000000110011010001001111100011101101001101101000111100011000000010110110011110
00111101001110110110100111011100110101001101010101011001101011110010010110110110
11001010010110100011111000001001111011011101100111110101011000010001010101001111
00101010110111110001000000110100100100111001110001001011010111111010110010100010
10011101110010110100111000100011011111111011010100110010010100001100001011101100
10110010111100011011100001110000100001011100101100110010100100101010010000100110
10001101010100111110100011011101100001100001101011010110111010110101001011100110
11010110100001100001001001111011100110101110000011101110101101101111000110010111
11110001011111000011001110111000010001000000010111110000110001101100110100001001
10110010011001010011001110101100100011100110000001011111010010000011011001100111
10001010111111011111101000101011001100101101010100110001001110011011001100100010
10110000111101100000011100110010011011011110110011111100100011110110001111100000
11111101011100010111011110101010110010010100000101001001101011101110000110001101
10101100100101110101000010011101100111100001101011000101110011110110001010001110
10000100111000011001101100000010101010100000000111000111111010011111101011101000
00011010010110011100101001000110000101100101100101001111110011001000111011100110
01010110001011110111101110111110100011100100100000000000101011111100010010001111
10111111000001000010101001011100111100111100000010000111101101100010110011011101
10011111000101110000111111100110010111000101111110110101100110010001110111011100
00100010010111110101011001111101101010010110000010000011011011000100001101001110
11110100111010011011010001010011100111010110110111110101010110000000101111110011
00000100011011110110011010101110110101100000100001000100000001011011001011001111
00000000010001101011100100100011010110101110011011110011001110100111010111101111
01000110001001011000101110010111101010100000000100001010011010010011000101001110
10010110001100010111101110111001111110010001101001000010111010111000110111011101
11000011001100000100100101101000101110111101110000001110110110001110110110001111
00001011000000010010101100101001001000010010111101011101001110001001111000100101
11100100011101000100010011111101001101100111111001010100110010110010111011011011
00100110111111010011000100001000100111011000110000111011000110100010111111000110
11101011110110001100111101010110011100111010000011101101001001101011011000010100
11000000110011111100111100111011010010011010011110110110000111100001000100101011
11101100010000111000010000010001110101101111000110110001010010010010001111010101
10010110100010100101101001000011001000001011100000001001111110001111110101100110
01000110111011101101010011110001000110011101001101010111110110100110110110101001
10111100100000010110001001100000111011100110101000001000001100000010110110111111
01100100110011001110101000010010101010100011111111010011101010000111010000011010
11100100011001111100011101010001111010100010000101101001111010011101010111110110
11010010010100110100011110000010011011110100000011100011110010110011110101000100
10001011100001111010111010110100010101011111110111001000000101001011011001011010
10010010000100100111010110111000101001100000110100100100111011111011001101010100
11101011001101111010010010011001011101010111110110000110000100110110111100101010
11110010100101001111011010000101101100100010011010001101110111010100110100110011
11011001101001010101101001110001100000000000010010101100100000111110100110000101
01101000011011111100000111110100110110111010011100100111000110100000100011110000
01100000000000001000000100100101010111010001001110101011111011001000101000100010
00110001010110010011111001101110011100000000101001101001001111000001011010000100
11011010100110110001111001001011101001011000111001010111100100110100110010011011
01111100010001100011101111000000111001110110001011000110000100101111001110110001
00001111100010000111011001100011111010001101010110111100010011111101011001111000
00011010010111001000000010000101000001001011110000110110000010010011110101100001
01011110010110001101011001000111010000010000100010110110011101011111001111000111
00111010111100011101001000100011100100110000000001010100000100100010100011110110
10110101101111011100010001110011001100001011101010011110011001101111100001101101
01101111011111010111110010001100010011011110011101101110010111100101111100000010
01111001110000011011001100010100101101101100100100000010101110010001101011011111
10101010110001000010100110110000011011000101001101000110011010000000000000000010
00001111101100101001000011000100101101010111000100001101101001010101000111101110
10101001011110010110001010010111010011011000000011100111110010011010001101101011
00111011100101100110011110000001100110110001110011010101011010011100100000000000
";

       #endregion
     
       private const string TITLE = "Conway's Game of Life";
       private static bool _runRandomSample = false;
       private static bool _verifySample1 = false;
       private static SimulatorBase _simulator;
       private static StringBuilder _log;
       private static string _logFile;
       private static decimal _sampleSize;


       static void Main(string[] args)
       {
           Setup();
           ShowHeader();
           ShowHelp();
           string sample = GetInputSample();

           //WriteLog(sample);

           var inputCells = ParseInput(sample);

           var items = inputCells as Cell[] ?? inputCells.ToArray();
           _sampleSize = items.Count();
           if (_sampleSize >= (1024))  // optimise for L1 cache size (sysinternals or http://chocolatey.org/packages/cpu-z)
       //  if (false)
           {
               _simulator = new LargeSimulator(ROUNDS, items);
               WriteLog("LargeSimulator");
           }
           else
           {
               _simulator = new Simulator(ROUNDS, items);
               WriteLog("Simulator");
           }
          
           _simulator.OnNotifyMessage += WriteLog;
           _simulator.OnNotifyResult += PrintResult;
           _simulator.NotifyOnceEachResultSetComplete = !_runRandomSample;
           Console.WriteLine("Generating results...");
           //Console.WriteLine(sample);
           _simulator.Run();

           Console.ForegroundColor = ConsoleColor.DarkGreen;
           WriteLog(string.Format("Time taken: {0}", _simulator.TimeTaken));

           VerifySample1();
           WriteLogFile();
           Pause();

           if (_runRandomSample)
           {
               Console.ForegroundColor = ConsoleColor.White;
               Console.WriteLine("Press any key to stop");
               do
               {
                   while (!Console.KeyAvailable)
                   {
                       for (int i = 0; i < _simulator.Cells.Count; i++)
                       {
                           PrintResult(_simulator.Cells[i]);
                           Thread.Sleep(500);
                       }
                   }
               } while (Console.ReadKey(true).Key != ConsoleKey.Escape);
               
           }
       }

       private static decimal GetCellSize()
       {
           unsafe
           {
               return sizeof(Cell);
           }
       }


       private static string GetInputSample()
       {
           var input = Console.ReadLine();
           string sample = string.Empty;
           switch (input.ToLowerInvariant())
           {
               case "1":
                   _verifySample1 = true;
                  // WriteLog("Sample 1 " + SAMPLE_INPUT);
                   return SAMPLE_INPUT;
               case "2":
                   WriteLog("Sample 2: " + SAMPLE_INPUT2);
                   sample = SAMPLE_INPUT2;
                   for (int i = 0; i < 2; i++)
                   {
                       sample = sample + sample;
                   }
                   return sample;
               case "r":
                   _runRandomSample = true;
                   var rnd = new Random();
                   int height = rnd.Next(150, 250);
                   int width = rnd.Next(30, 80);
                   if (height > Console.WindowHeight && width > Console.WindowWidth)
                        Console.SetWindowSize(width,height);
                   sample =  GenerateRandomString(25,25);
                   //var sample =  GenerateRandomString(height, width);
                   WriteLog("Random Sample: " + sample);
                   return sample;
               default:
                   try
                   {
                       if (!File.Exists(input))
                       {
                           ShowHelp();
                       }

                       return File.ReadAllText(input);
                   }
                   catch (Exception ex)
                   {
                       ShowError("File input invalid", ex);
                   }
                   break;
           }
           throw new InvalidDataException("No sample");
       }

       private static void PrintResult(IEnumerable<Cell> result)
       {
           if (_runRandomSample)
               Console.Clear();

           var sb = new StringBuilder();
           var gr = from r in result group r by r.Y;

           foreach (var row in gr)
           {
               foreach (var cell in row)
               {
                   sb.Append((int) cell.Health);
               }
               sb.AppendLine();
           }

           //Console.Beep(37,100);
           Console.Write(sb.ToString());
           
       }

       private static IEnumerable<Cell> ParseInput(string input)
       {
           var cells = new List<Cell>();
           int lineCount = 1;
           int widthCount = 0;
           bool isFirstRun = true;
           try
           {
               using (var reader = new StringReader(input))
               {
                   string line = string.Empty;
                   do
                   {
                       line = reader.ReadLine();
                       if (!string.IsNullOrWhiteSpace(line))
                       {

                           if (isFirstRun) // safe guard to match input line lengths match
                           {
                               widthCount = line.Length;
                               isFirstRun = false;
                           }
                           else
                           {
                               if (line.Length>widthCount) 
                                   throw new ArgumentException("Input incorrect. Characters on all lines should have the same count: check line: " + lineCount+1);
                           }

                           int charCount = 1;
                           foreach (var chr in line.ToCharArray())
                           {
                               cells.Add(new Cell(charCount, lineCount, IsAlive(chr)));
                               charCount++;
                           }

                           lineCount++;
                       }

                   } while (line != null);
               }
           }
           catch (Exception ex)
           {
               Console.ForegroundColor = ConsoleColor.DarkRed;
               ShowError("Failed to parse input", ex);
           }

           return cells;
       }

       private static Health IsAlive(char chr)
       {
           if (chr == Convert.ToChar("1")) return Health.Alive;
           if (chr == Convert.ToChar("0")) return Health.Dead;

           throw new InvalidDataException(chr + " is not a valid alive or dead character");
       }

       private static void Setup()
       {
           Console.Title = TITLE;
           Console.ForegroundColor = ConsoleColor.White;
           Console.BackgroundColor = ConsoleColor.Black;
           Console.WindowLeft = Console.WindowTop = 0;
           Console.WindowWidth = 100;
           Console.WindowHeight = 80;

           _log = new StringBuilder();
           if (!Directory.Exists(LOG_DIRECTORY))
               ShowError("Log directory does not exist " + LOG_DIRECTORY, new DirectoryNotFoundException(LOG_DIRECTORY));
           
       }

       private static void ShowHeader()
       {
           Console.WriteLine(TITLE);
           Console.WriteLine("------------------------");
           Console.WriteLine("Sample by Chris McKelt");
       }

       private static void ShowHelp()
       {
           Console.ForegroundColor = ConsoleColor.DarkGray;
           Console.WriteLine("Enter:");
           Console.WriteLine("-- '1' for test sample 1");
           Console.WriteLine("-- '2' for test sample 2");
           Console.WriteLine("-- 'r' for a random sample");
           Console.WriteLine("-- or paste a file path for text file input");
           Console.ForegroundColor = ConsoleColor.White;
       }

       private static void ShowError(string msg, Exception e)
       {
           Console.ForegroundColor = ConsoleColor.DarkRed;
         
           Console.WriteLine("------------------------");
           Console.WriteLine("Error");
           Console.WriteLine(msg);
           Console.WriteLine("------------------------");
           Console.WriteLine(e);
           Console.ReadLine();
           Environment.Exit(1);
       }

       private static void Pause()
       {
           Console.WriteLine("");
           Console.WriteLine("\nPress any key to exit.");
           Console.ReadLine();
       }

       private static string GenerateRandomString(int height, int width)
       {
           var sb = new StringBuilder();
           var random = new Random();

           for (int a = 0; a < height; a++)
           {
               for (int b = 0; b < width; b++)
               {
                   sb.Append(random.Next(1,3) % 2 == 0 ? "1" : "0");
               }
               sb.AppendLine();
           }

           return sb.ToString();
       }

       private static void WriteLog(string msg)
       {
           Console.WriteLine(msg);

           _log.AppendLine(msg);
       }

       private static void WriteLogFile()
       {
           try
           {
               string fileName = string.Format("{0}{1}{2}{3}{4}{5}{6}{7}.log", "GameOfLife_", DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, "_", DateTime.Now.ToString("hh_mm"), "_sample_size_", _sampleSize);
               _logFile = Path.Combine(LOG_DIRECTORY, fileName);
              File.WriteAllText(_logFile, _log.ToString());
           }
           catch (Exception ex)
           {
               ShowError("Log file creation failed", ex);
           }
       }

       private static void VerifySample1()
       {
           if (_verifySample1)
           {
               const string expected1 = @"
01000
00110
01000
";

               const string expected2 = @"
00100
01100
00100
";

               const string expected3 = @"
01100
01110
01100
";
               var expectedCells = new Dictionary<int, IEnumerable<Cell>>
                   {
                       {1, ParseInput(expected1)},
                       {2, ParseInput(expected2)},
                       {3, ParseInput(expected3)}
                   };

               foreach (var expectedCellList in expectedCells.Where(a => a.Key > 0).GroupBy(b => b.Key)) // skip zero original generation
               {
                   foreach (var kvp in expectedCellList)
                   {
                       foreach (var expectedCell in kvp.Value)
                       {
                           var actualCell =
                               _simulator.Cells[kvp.Key].SingleOrDefault(a => a.X == expectedCell.X && a.Y == expectedCell.Y);

                           if (!actualCell.Equals(expectedCell))
                           {
                               Console.ForegroundColor = ConsoleColor.DarkRed;
                               Console.WriteLine("Failed");
                               Console.WriteLine("Excepted   {0}  X: {1}  Y: {1} Health:{2}", expectedCell.X, expectedCell.Y, expectedCell.Health);
                               Console.WriteLine("Actual     {0}  X: {1}  Y: {1} Health:{2}", actualCell.X, actualCell.Y, actualCell.Health);
                               Console.WriteLine();
                           }
                       }
                   }
               }
               Console.WriteLine("Sample 1 test passed");
           }
       }


       public static int GetSizeOfObject(object obj)
       {

           unsafe
           {
               return sizeof(Cell);
           }
       }
   }
}
